#!/usr/bin/env python3
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
"""

import argparse
import asyncio
import os
import sys
from pathlib import Path
from main import analyze_interview_file
from config import load_config

def main():
    parser = argparse.ArgumentParser(
        description="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π - AI-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python cli.py interview.mov                    # –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  python cli.py *.mov                           # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö .mov —Ñ–∞–π–ª–æ–≤
  python cli.py --output-dir reports/ *.mp4     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É reports/
        """
    )
    
    parser.add_argument(
        "files",
        nargs="+",
        help="–§–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è .mov, .mp4, .avi, .mkv, .wav, .mp3)"
    )
    
    parser.add_argument(
        "--output-dir",
        "-o",
        help="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–∞ –∂–µ –ø–∞–ø–∫–∞, —á—Ç–æ –∏ —Ñ–∞–π–ª—ã)"
    )
    
    parser.add_argument(
        "--config",
        "-c",
        help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É (yaml/json). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: config.yaml|yml|json –≤ –∫–æ—Ä–Ω–µ"
    )
    
    parser.add_argument(
        "--model",
        "-m",
        default="gemini-2.5-flash",
        help="–ú–æ–¥–µ–ª—å Google Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: gemini-2.5-flash)"
    )
    
    parser.add_argument(
        "--verbose",
        "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    if not os.getenv("GOOGLE_API_KEY"):
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω GOOGLE_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á –≤ —Ñ–∞–π–ª .env –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –∑–¥–µ—Å—å: https://makersuite.google.com/app/apikey")
        sys.exit(1)
    
    if not os.getenv("HF_TOKEN"):
        print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ –Ω–∞–π–¥–µ–Ω HF_TOKEN –¥–ª—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏")
        print("–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    supported_formats = {'.mov', '.mp4', '.avi', '.mkv', '.wav', '.mp3', '.m4a', '.flac', '.json'}
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã
    valid_files = []
    for file_pattern in args.files:
        path = Path(file_pattern)
        
        if path.is_file():
            if path.suffix.lower() in supported_formats:
                valid_files.append(str(path))
            else:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é {path}: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç")
        elif path.is_dir():
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞, –∏—â–µ–º —Ñ–∞–π–ª—ã –≤ –Ω–µ–π
            for file_path in path.rglob("*"):
                if file_path.is_file() and file_path.suffix.lower() in supported_formats:
                    valid_files.append(str(file_path))
        else:
            # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ glob pattern
            import glob
            for file_path in glob.glob(file_pattern):
                path_obj = Path(file_path)
                if path_obj.is_file() and path_obj.suffix.lower() in supported_formats:
                    valid_files.append(file_path)
    
    if not valid_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        sys.exit(1)
    
    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(valid_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    for file_path in valid_files:
        print(f"  - {file_path}")
    
    # –ö–æ–Ω—Ñ–∏–≥ –∏ –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    cfg = load_config(args.config)
    out_base = Path(args.output_dir or cfg.get("output_dir", "results"))
    out_base.mkdir(parents=True, exist_ok=True)
    print(f"üìÅ –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {out_base}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    results = []
    # –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –ø–æ –≤—Å–µ–º —Å–µ—Å—Å–∏—è–º
    total_issues = total_high = total_medium = total_low = 0
    qa_total_questions = 0
    qa_sum_scores = 0.0
    qa_topics = {}  # topic -> {sum: float, count: float}
    qa_hotspots = 0
    qa_low_threshold = float(cfg.get("qa_low_threshold", 6.0))
    for i, file_path in enumerate(valid_files, 1):
        print(f"\n{'='*60}")
        print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {i}/{len(valid_files)}: {Path(file_path).name}")
        print(f"{'='*60}")
        
        try:
            result = asyncio.run(analyze_interview_file(file_path, output_dir=str(out_base)))
            results.append((file_path, result))

            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ñ–∞–π–ª—É
            issues = getattr(result, 'issues', []) or []
            high = sum(1 for it in issues if (it.severity or '').lower() == 'high')
            medium = sum(1 for it in issues if (it.severity or '').lower() == 'medium')
            low = sum(1 for it in issues if (it.severity or '').lower() == 'low')
            total_issues += len(issues)
            total_high += high
            total_medium += medium
            total_low += low

            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º QA –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (–±–µ–∑ JSON —Ñ–∞–π–ª–æ–≤)
            qa_eval = getattr(result, 'qa_eval', None)
            if qa_eval is not None:
                items = getattr(qa_eval, 'items', []) or []
                summary = getattr(qa_eval, 'summary', None)
                if items:
                    qa_total_questions += len(items)
                    for it in items:
                        sc = float(getattr(it, 'correctness_score', 0.0))
                        vd = str(getattr(it, 'verdict', '')).lower()
                        topic = str(getattr(it, 'topic', 'other'))
                        qa_sum_scores += sc
                        t = qa_topics.setdefault(topic, {"sum": 0.0, "count": 0.0})
                        t["sum"] += sc
                        t["count"] += 1
                        if sc < qa_low_threshold or vd in {"incorrect", "unclear"}:
                            qa_hotspots += 1
                elif summary is not None:
                    # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –Ω–µ—Ç items, –∏—Å–ø–æ–ª—å–∑—É–µ–º summary
                    qn = int(getattr(summary, 'total_questions', 0) or 0)
                    qa_total_questions += qn
                    qa_sum_scores += float(getattr(summary, 'average_score', 0.0) or 0.0) * qn
                    for tinfo in (getattr(summary, 'by_topic', []) or []):
                        try:
                            topic = str(tinfo.get('topic', 'other'))
                            cnt = float(tinfo.get('count', 0) or 0)
                            avg = float(tinfo.get('avg_score', 0.0) or 0.0)
                            t = qa_topics.setdefault(topic, {"sum": 0.0, "count": 0.0})
                            t["sum"] += avg * cnt
                            t["count"] += cnt
                        except Exception:
                            continue

            if args.verbose and result:
                print(f"\nüìà –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {Path(file_path).name}:")
                print(f"   –û—à–∏–±–æ–∫: {len(issues)} (High: {high}, Medium: {medium}, Low: {low})")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {file_path}: {e}")
            if args.verbose:
                import traceback
                traceback.print_exc()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ü–û –ù–ï–°–ö–û–õ–¨–ö–ò–ú –°–ï–°–°–ò–Ø–ú")
    print(f"{'='*60}")
    
    successful = len([r for r in results if r[1] is not None])
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {successful}/{len(valid_files)} —Ñ–∞–π–ª–æ–≤")

    if successful > 0:
        print(f"üö© –û—à–∏–±–∫–∏ —Å—É–º–º–∞—Ä–Ω–æ: {total_issues} (High: {total_high}, Medium: {total_medium}, Low: {total_low})")
        if qa_total_questions > 0:
            qa_avg = qa_sum_scores / qa_total_questions
            print(f"‚ùì QA: –≤–æ–ø—Ä–æ—Å–æ–≤: {qa_total_questions}, —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {qa_avg:.1f}/10, hotspots: {qa_hotspots} (–ø–æ—Ä–æ–≥ {qa_low_threshold})")
            # –¢–æ–ø-3 —Å–ª–∞–±—ã—Ö —Ç–µ–º—ã
            topic_avgs = [
                (t, (v["sum"] / v["count"])) for t, v in qa_topics.items() if v["count"] > 0
            ]
            topic_avgs.sort(key=lambda x: x[1])
            worst = topic_avgs[:3]
            if worst:
                print("   –°–ª–∞–±—ã–µ —Ç–µ–º—ã:")
                for t, avg in worst:
                    print(f"   - {t}: {avg:.1f}/10")
    
    print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {out_base}")

if __name__ == "__main__":
    main()
